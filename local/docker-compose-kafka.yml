version: '2.1'

services:
  product:
    build: ../microservices/product/service
    image: edjaz/product-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,streaming_instance_0,kafka
        - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      - kafka
      - mongodb

  product-p1:
    build: ../microservices/product/service
    image: edjaz/product-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,streaming_instance_1,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      - kafka
      - mongodb

  recommendation:
    build: ../microservices/recommendation/service
    image: edjaz/recommendation-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,streaming_instance_0,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      - kafka
      - mongodb

  recommendation-p1:
    build: ../microservices/recommendation/service
    image: edjaz/recommendation-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,streaming_instance_1,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      - kafka
      - mongodb

  review:
    build: ../microservices/review/service
    image: edjaz/review-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,streaming_instance_0,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  review-p1:
    build: ../microservices/review/service
    image: edjaz/review-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,streaming_instance_1,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  product-composite:
    build: ../microservices/product-composite/service
    image: edjaz/product-composite-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,streaming_partitioned,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}
    depends_on:
      - kafka

  gateway:
    build: ../spring-cloud/gateway
    image: edjaz/gateway
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}

  auth-server:
    build: ../spring-cloud/authorization-server
    image: edjaz/auth-server
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,kafka
      - SPRING_CLOUD_CONFIG_URI=${SPRING_CLOUD_CONFIG_URI}

  config-server:
    build: ../spring-cloud/config-server
    image: edjaz/config-server
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,config,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USR}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PWD}
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 20s
      timeout: 5s
      retries: 10

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PWD}
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=${MYSQL_USR}
      - MYSQL_PASSWORD=${MYSQL_PWD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USR} --password=${MYSQL_PWD} --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper

  zipkin:
    image: openzipkin/zipkin:2.12.9
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - 9411:9411
    depends_on:
      - kafka

networks:
  my-network:
    name: my-network
